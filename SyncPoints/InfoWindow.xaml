<Window x:Class="SyncPoints.InfoWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:local="clr-namespace:SyncPoints" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:ui="http://schemas.modernwpf.com/2019" Title="InfoWindow"
        Width="800" Height="450" ui:ThemeManager.RequestedTheme="Light" ui:WindowHelper.UseModernWindowStyle="True"
        mc:Ignorable="d">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="9*" />
        </Grid.RowDefinitions>
        <TextBlock HorizontalAlignment="Center" FontSize="30" FontWeight="DemiBold" Foreground="RoyalBlue"
                   Text="Application Info" />
        <ScrollViewer Grid.Row="1" Margin="15" BorderBrush="RoyalBlue" BorderThickness="2">
            <TextBlock Margin="5" FontSize="18" TextWrapping="Wrap">
                <Run FontSize="20" FontWeight="DemiBold" Text="Welcome to SyncPoints!" />
                <LineBreak />
                <Run Text="Here is a short guide on using this application:" />
                <LineBreak />
                <Run FontSize="20" FontWeight="DemiBold" Text="1.   Creating your graph" />
                <LineBreak />
                <Run Text="     Here you have several options. First of all, you can generate a graph randomly. All you need to do is fill all the text boxes with desirable parameters. You can input probability as a decimal number (the format depends on your locale) and as a fraction (example: 3/4). " />
                <LineBreak />
                <Run Text="     Second option is to set everything up manually. You have to add vertices one by one, then connect them with edges. You can click on vertices and edges to change their parameters or delete them." />
                <LineBreak />
                <Run Text="     Your third option is to generate a lattice graph. Right now the application supports only triangular and rectangular lattices. You can specify the horizontal and vertical length of the lattice. All edges have a weight of 1.5 by default. If you want to edit it, I recommend exporting it to GraphML and editing the file via a text editor. Due to the limitations of graph layout algorithm, the lattice may look wonky? but it will still work as intended." />
                <LineBreak />
                <Run Text="     Additionally, id you've created a graph before and saved is as a GraphML file you can load it into the application. Just press the Load button on the left control panel." />
                <LineBreak />
                <Run FontSize="20" FontWeight="DemiBold" Text="2.   Setting the starting edges" />
                <LineBreak />
                <Run Text="     Here you too have several options. First of all you can generate starting edges randomly. The algorithm will go through each edge and with a probability that you've set the edge will become a starting edge. The color of the point is chosen randomly." />
                <LineBreak />
                <Run Text="     Your second option is to set the starting edges manually. Just click on the edge and edit its parameters. This allows you to inject a large amount of points on a single edge and just offers maximum customization." />
                <LineBreak />
                <Run Text="     The third option is to import the starting edges you've created beforehand. WARNING: Make sure you are importing the edges created for exactly this graph, as the points are stored by edge id. Even a graph that looks the same might not contain the same starting points." />
                <LineBreak />
                <Run FontSize="20" FontWeight="DemiBold" Text="3.   Running the simulation" />
                <LineBreak />
                <Run Text="     First of all, you must select the type of synchronization you want modelled. Additionally, you can turn off the visual point animation to conserve performance, although usually the systems that become unstable will still hang up, just at higher point numbers numbers." />
                <LineBreak />
                <Run Text="     The standard synchronization model decreases the vertex sync number (of the same type as the point) when a point enters it. As soon as the number reaches zero, a point of this type will exit on each of the out edges of the vertex." />
                <LineBreak />
                <Run Text="     The sandpile model is based on the Bak-Tang-Wiesenfeld model. When the sync number reaches zero, a point from the sandpile will exit for each out edge of the vertex. For each exiting point the sync number is increased by one, thus maintaining the number of points in the system. The ricepile model behaves like the sandpile model, but with one key difference: after a toppling has occured, the maximum synchronization number is randomized to be within 3 of the previous maximum, thus making the system stochastic." />
                <LineBreak />
                <Run Text="     During the simulation you can pause, resume and change the animation speed."/>
                <LineBreak/>
                <Run FontSize="20" FontWeight="DemiBold" Text="4.   Collecting data" />
                <LineBreak/>
                <Run Text="     During the simulation there is a lot of data on display. The program displays the total number of points created for each color, number of points currently on screen, total distance travelled by all points, number of meetings between points of different types. By clicking the Show Vertex Data button you can see the full data of every vertex. "/>
                <LineBreak/>
                <Run Text="     If you want to analyze the data in a different program you can export everything to a JSON file. Additipnally, the exported file will contain a synchronization history for each vertex that is not shown in the interface."/>
            </TextBlock>
        </ScrollViewer>
    </Grid>
</Window>
